#!/usr/bin/env php
<?php

error_reporting(E_ALL);
ini_set('display_errors', '1');

set_error_handler(function($errno, $errstr, $errfile, $errline) {

	if ($errno & error_reporting()) {
		throw new ErrorException($errstr, $errno, 0, $errfile, $errline);
	}

});

set_exception_handler(function($error) {
	echo "\n";
	echo "### Error #####################################################################\n";
	echo "#\n";
	echo "# ". $error->getMessage() ."\n";
	echo "#\n";
	echo "###############################################################################\n\n\n";
	echo "#- ". $error->getFile() ."(". $error->getLine() .")\n";
	echo $error->getTraceAsString() ."\n";
});

function require_if_exists($file)
{
	if (file_exists($file)) {
		return require $file;
	}
}

if (!(
	($composer = require_if_exists(__DIR__ . '/vendor/autoload.php')) ||
	($composer = require_if_exists(__DIR__ . '/../../../vendor/autoload.php'))
)) {
	echo "Could not find Composer installation. Please run `composer install` first.";
}



// `instanceof` does not trigger autoloading, because technically an object 
// can't be an instance of a class/interface that hasn't been loaded yet. 
// Except when `class_alias` is used. Which is the case for the following file.
// So we'll manually trigger autoloading before any other code is run.
interface_exists(JustDeploy\FilesystemInterface::class);



function require_sandboxed($___path, $___scope=[])
{
	extract($___scope);

	return require($___path);
}

(new JustDeploy\Application())->execute(
	array_slice($argv, 1),
	$_ENV
);